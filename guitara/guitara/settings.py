"""
Django settings for guitara project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os

print(
    "[SETTINGS IMPORT] DJANGO_SETTINGS_MODULE:",
    os.environ.get("DJANGO_SETTINGS_MODULE"),
)
print("[SETTINGS IMPORT] settings.py __file__:", __file__)

from pathlib import Path
from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-ic&egssnr$r%4-xjaq*0g-^8&m@&vbf2l+!0^2)1t(pdka3%5o"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["localhost", "127.0.0.1", "testserver"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "knox",
    "corsheaders",
    "django_filters",
    "channels",
    "django_celery_beat",
    "django_celery_results",
    "core",
    "authentication",
    "registration",
    "scheduling",
    "attendance",
    "inventory",  # Added inventory app
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "core.middleware.sanitization_middleware.SanitizationMiddleware",
    "scheduling.services_middleware.ServicesMiddleware",
    "scheduling.performance_middleware.PerformanceMonitoringMiddleware",
    "scheduling.performance_middleware.DatabaseQueryLoggingMiddleware",
    "scheduling.performance_middleware.CacheHitRateMiddleware",
    "scheduling.performance_middleware.APIResponseOptimizationMiddleware",
    "scheduling.performance_middleware.HealthCheckMiddleware",
]

ROOT_URLCONF = "guitara.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "guitara.wsgi.application"
ASGI_APPLICATION = "guitara.asgi.application"

# Channels layer configuration
# Use Redis if available, otherwise fall back to InMemory
REDIS_URL = os.environ.get("REDIS_URL", None)
if REDIS_URL:
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels_redis.core.RedisChannelLayer",
            "CONFIG": {
                "hosts": [REDIS_URL],
            },
        },
    }
else:
    CHANNEL_LAYERS = {
        "default": {"BACKEND": "channels.layers.InMemoryChannelLayer"},
    }


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

import environ

env = environ.Env()

# Explicitly specify the path to the .env file
env_file = Path(__file__).resolve().parent.parent / ".env"
if env_file.exists():
    environ.Env.read_env(env_file)
else:
    # Don't raise error if running in Railway/production, just rely on os.environ
    pass

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": env("SUPABASE_DB_NAME", default=None),
        "USER": env("SUPABASE_DB_USER", default=None),
        "PASSWORD": env("SUPABASE_DB_PASSWORD", default=None),
        "HOST": env("SUPABASE_DB_HOST", default=None),
        "PORT": "5432",
        "OPTIONS": {
            # PostgreSQL-specific connection options
            "connect_timeout": 10,
            "application_name": "guitara_scheduling",
        },
        "ATOMIC_REQUESTS": False,  # For better performance
        "CONN_HEALTH_CHECKS": True,
        "CONN_MAX_AGE": 600,  # 10 minutes - Connection reuse timeout
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Manila"  # UTC+08:00 - Philippine Standard Time

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Media files (user uploads)
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Base URL for constructing absolute URLs
BASE_URL = "http://localhost:8000"

# File upload settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": ("knox.auth.TokenAuthentication",),
}

AUTH_USER_MODEL = "core.CustomUser"

STATICFILES_DIRS = [
    # BASE_DIR / 'frontend/dist',  # Remove this line if the directory does not exist
]

PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
]

# CORS configuration
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",  # Add your frontend's origin
]

# Allow credentials and additional CORS settings for media files
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = False  # Keep this False for security

# Allow common headers that might be needed for media requests
CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]

# Security settings
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
X_FRAME_OPTIONS = "DENY"
SESSION_COOKIE_SECURE = True  # Use only in HTTPS environments
CSRF_COOKIE_SECURE = True  # Use only in HTTPS environments
CSRF_COOKIE_HTTPONLY = True
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# Content Security Policy
CSP_DEFAULT_SRC = ("'self'",)
CSP_SCRIPT_SRC = ("'self'",)
CSP_STYLE_SRC = ("'self'", "'unsafe-inline'")
CSP_IMG_SRC = ("'self'", "data:")
CSP_CONNECT_SRC = ("'self'",)
CSP_FONT_SRC = ("'self'", "data:")

# Email configuration for Gmail SMTP
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = env("EMAIL_HOST_USER", default="your_gmail_address@gmail.com")
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD", default="your_app_password")
DEFAULT_FROM_EMAIL = env(
    "DEFAULT_FROM_EMAIL", default="Your Name <your_gmail_address@gmail.com>"
)

# Enhanced logging for debugging authentication issues
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "[{levelname}] {asctime} {name} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "[{levelname}] {name}: {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "file": {
            "class": "logging.FileHandler",
            "filename": "debug.log",
            "formatter": "verbose",
        },
    },
    "loggers": {
        "django.db.backends": {
            "handlers": ["console"],
            "level": "INFO",  # Reduced from DEBUG to avoid too much noise
        },
        "django.contrib.auth": {
            "handlers": ["console"],
            "level": "DEBUG",
        },
        "scheduling": {
            "handlers": ["console", "file"],
            "level": "DEBUG",
            "propagate": False,
        },
        "scheduling.views": {
            "handlers": ["console", "file"],
            "level": "DEBUG",
            "propagate": False,
        },
        "scheduling.serializers": {
            "handlers": ["console", "file"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
}

APPEND_SLASH = True

# ======================================
# CELERY CONFIGURATION FOR BACKGROUND TASKS
# ======================================

import os

CELERY_BROKER_URL = os.environ.get("CELERY_BROKER_URL", "redis://127.0.0.1:6379/0")
CELERY_RESULT_BACKEND = "django-db"
CELERY_CACHE_BACKEND = "django-cache"

# Task execution settings
CELERY_TASK_ALWAYS_EAGER = False  # Set to True for synchronous testing
CELERY_TASK_EAGER_PROPAGATES = True
CELERY_TASK_REJECT_ON_WORKER_LOST = True

# Task routing for performance
CELERY_TASK_ROUTES = {
    "scheduling.tasks.process_driver_assignment": {"queue": "high_priority"},
    "scheduling.tasks.send_appointment_notifications": {"queue": "notifications"},
    "scheduling.tasks.cleanup_expired_appointments": {"queue": "maintenance"},
}

# Worker configuration
CELERY_WORKER_PREFETCH_MULTIPLIER = 4
CELERY_WORKER_MAX_TASKS_PER_CHILD = 1000

# Beat scheduler for periodic tasks
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"

# Results configuration
CELERY_RESULT_EXPIRES = 3600  # 1 hour
CELERY_TASK_RESULT_EXPIRES = 3600

# Serialization
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TIMEZONE = TIME_ZONE

# Error handling
CELERY_TASK_SOFT_TIME_LIMIT = 60  # 60 seconds
CELERY_TASK_TIME_LIMIT = 120  # 2 minutes

# ======================================
# LOCAL SETTINGS OVERRIDE
# ======================================
# Import local settings for mode configuration (Redis vs In-Memory)
try:
    from .local_settings import *

    print("[SETTINGS] Local settings loaded successfully")
except ImportError:
    print("[SETTINGS] No local settings found, using defaults")
    pass
