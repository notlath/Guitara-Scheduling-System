# Generated by Django 4.2.x on 2025-06-19 12:05

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ("registration", "0001_initial"),
    ]

    operations = [
        # Service Model Performance Indexes
        migrations.RunSQL(
            sql=[
                # Service lookups
                "CREATE INDEX idx_services_active ON registration_service(is_active, name);",
                "CREATE INDEX idx_services_duration_price ON registration_service(duration, price, is_active);",
                # Service search
                "CREATE INDEX idx_services_name_active ON registration_service(name, is_active);",
                "CREATE INDEX idx_services_price_range ON registration_service(price, is_active) WHERE is_active = true;",
                # Service duration queries
                "CREATE INDEX idx_services_duration_active ON registration_service(duration, is_active) WHERE is_active = true;",
            ],
            reverse_sql=[
                "DROP INDEX IF EXISTS idx_services_active;",
                "DROP INDEX IF EXISTS idx_services_duration_price;",
                "DROP INDEX IF EXISTS idx_services_name_active;",
                "DROP INDEX IF EXISTS idx_services_price_range;",
                "DROP INDEX IF EXISTS idx_services_duration_active;",
            ],
        ),
        # Material Model Performance Indexes
        migrations.RunSQL(
            sql=[
                # Material lookups by service
                "CREATE INDEX idx_materials_service_category ON registration_material(service_id, category) WHERE service_id IS NOT NULL;",
                "CREATE INDEX idx_materials_category_name ON registration_material(category, name);",
                # Stock management
                "CREATE INDEX idx_materials_stock_quantity ON registration_material(stock_quantity, category);",
                "CREATE INDEX idx_materials_auto_deduct ON registration_material(auto_deduct, service_id) WHERE auto_deduct = true;",
                # Material properties
                "CREATE INDEX idx_materials_reusable ON registration_material(reusable, category) WHERE reusable = true;",
                "CREATE INDEX idx_materials_unit_category ON registration_material(unit_of_measure, category);",
                # Service-material relationships
                "CREATE INDEX idx_materials_service_auto ON registration_material(service_id, auto_deduct, stock_quantity) WHERE service_id IS NOT NULL;",
            ],
            reverse_sql=[
                "DROP INDEX IF EXISTS idx_materials_service_category;",
                "DROP INDEX IF EXISTS idx_materials_category_name;",
                "DROP INDEX IF EXISTS idx_materials_stock_quantity;",
                "DROP INDEX IF EXISTS idx_materials_auto_deduct;",
                "DROP INDEX IF EXISTS idx_materials_reusable;",
                "DROP INDEX IF EXISTS idx_materials_unit_category;",
                "DROP INDEX IF EXISTS idx_materials_service_auto;",
            ],
        ),
        # Legacy Models Performance Indexes (if still in use)
        migrations.RunSQL(
            sql=[
                # Therapist model
                "CREATE INDEX idx_registration_therapist_email ON registration_therapist(email) WHERE email IS NOT NULL;",
                "CREATE INDEX idx_registration_therapist_username ON registration_therapist(username) WHERE username IS NOT NULL;",
                "CREATE INDEX idx_registration_therapist_specialization ON registration_therapist(specialization) WHERE specialization IS NOT NULL;",
                # Driver model
                "CREATE INDEX idx_registration_driver_email ON registration_driver(email) WHERE email IS NOT NULL;",
                "CREATE INDEX idx_registration_driver_username ON registration_driver(username) WHERE username IS NOT NULL;",
                # Operator model
                "CREATE INDEX idx_registration_operator_email ON registration_operator(email) WHERE email IS NOT NULL;",
                "CREATE INDEX idx_registration_operator_username ON registration_operator(username) WHERE username IS NOT NULL;",
            ],
            reverse_sql=[
                "DROP INDEX IF EXISTS idx_registration_therapist_email;",
                "DROP INDEX IF EXISTS idx_registration_therapist_username;",
                "DROP INDEX IF EXISTS idx_registration_therapist_specialization;",
                "DROP INDEX IF EXISTS idx_registration_driver_email;",
                "DROP INDEX IF EXISTS idx_registration_driver_username;",
                "DROP INDEX IF EXISTS idx_registration_operator_email;",
                "DROP INDEX IF EXISTS idx_registration_operator_username;",
            ],
        ),
    ]
