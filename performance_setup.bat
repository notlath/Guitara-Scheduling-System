@echo off
setlocal EnableDelayedExpansion

REM Performance Monitoring and Optimization Script for Guitara Scheduling System (Windows)
REM This script sets up and monitors the optimized real-time application

echo üöÄ Starting Guitara Performance Optimization Setup...
echo.

REM Initialize variables
set redis_ok=0
set db_ok=0
set celery_ok=0
set mode=unknown

REM Check if Redis is running (optional)
:check_redis
echo [INFO] Checking Redis connection...
redis-cli ping >nul 2>&1
if %errorlevel% == 0 (
    echo [‚úì] Redis is running - Full performance mode available
    set redis_ok=1
    set mode=redis
) else (
    echo [‚ö†] Redis is not running - Will use in-memory mode
    echo [INFO] For better performance, start Redis service or run redis-server.exe
    set redis_ok=0
    set mode=memory
)

REM Check database connection
:check_database
echo [INFO] Checking database connection...
cd guitara
python manage.py check --database default >nul 2>&1
if %errorlevel% == 0 (
    echo [‚úì] Database connection OK
    set db_ok=1
) else (
    echo [‚úó] Database connection failed
    set db_ok=0
)
cd ..

REM Display current status
:show_status
echo.
echo üìä System Status:
echo ==================
if "%redis_ok%"=="1" (
    echo Redis: ‚úÖ Available
) else (
    echo Redis: ‚ö†Ô∏è Not available (will use in-memory mode)
)
if "%db_ok%"=="1" (
    echo Database: ‚úÖ Connected
) else (
    echo Database: ‚ùå Connection failed
)
echo Current Mode: %mode%
echo.
goto :eof

REM Configure channels and celery based on Redis availability
:configure_mode
if "%1"=="configure_mode" goto run_configure_mode
goto :eof

:run_configure_mode
echo [INFO] Configuring application mode...
cd guitara

if "%mode%"=="redis" (
    echo [INFO] Configuring Redis mode for optimal performance...
    (
    echo # Redis Mode Configuration Override
    echo # This file is auto-generated by performance_setup.bat
    echo.
    echo CHANNEL_LAYERS = {
    echo     'default': {
    echo         'BACKEND': 'channels_redis.core.RedisChannelLayer',
    echo         'CONFIG': {
    echo             'hosts': [('127.0.0.1', 6379)],
    echo         },
    echo     },
    echo }
    echo.
    echo # Celery uses Redis broker (configured in main settings.py)
    echo CELERY_TASK_ALWAYS_EAGER = False
    echo CELERY_TASK_EAGER_PROPAGATES = True
    ) > mode_config.py
    echo [‚úì] Redis mode configured
) else (
    echo [INFO] Configuring in-memory mode...
    (
    echo # In-Memory Mode Configuration Override
    echo # This file is auto-generated by performance_setup.bat
    echo.
    echo CHANNEL_LAYERS = {
    echo     'default': {
    echo         'BACKEND': 'channels.layers.InMemoryChannelLayer',
    echo     },
    echo }
    echo.
    echo # Celery runs synchronously in memory mode
    echo CELERY_TASK_ALWAYS_EAGER = True
    echo CELERY_TASK_EAGER_PROPAGATES = True
    echo CELERY_BROKER_URL = 'memory://'
    ) > mode_config.py
    echo [‚úì] In-memory mode configured
    echo [‚ö†] Note: Background tasks will run synchronously
)

echo [‚úì] Application mode configured
cd ..
goto :eof

REM Run database optimizations
:optimize_database
if "%1"=="optimize_db" goto run_db_optimize
goto :eof

:run_db_optimize
echo [INFO] Applying database optimizations...
cd guitara
echo [INFO] Creating performance indexes...

python manage.py shell -c "
from django.db import connection
try:
    with connection.cursor() as cursor:
        # Appointment indexes
        cursor.execute('CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_appointments_status_date ON scheduling_appointment(status, date);')
        cursor.execute('CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_appointments_therapist_date_status ON scheduling_appointment(therapist_id, date, status);')
        cursor.execute('CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_appointments_driver_date_status ON scheduling_appointment(driver_id, date, status);')
        cursor.execute('CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_appointments_date_start_time ON scheduling_appointment(date, start_time);')
        
        # Availability indexes
        cursor.execute('CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_availability_user_date_time ON scheduling_availability(user_id, date, start_time, end_time);')
        cursor.execute('CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_availability_user_date_available ON scheduling_availability(user_id, date, is_available) WHERE is_available = true;')
        
        # Notification indexes
        cursor.execute('CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_notifications_user_unread ON scheduling_notification(user_id, is_read, created_at) WHERE is_read = false;')
        
        print('Database indexes created successfully')
except Exception as e:
    print(f'Error creating indexes: {e}')
"

echo [‚úì] Database optimization completed
cd ..
goto :eof

REM Start Celery workers
:start_celery
if "%1"=="start_celery" goto run_start_celery
goto :eof

:run_start_celery
echo [INFO] Starting Celery workers...
cd guitara

if "%mode%"=="redis" (
    echo [INFO] Starting Celery with Redis broker...
    REM Start Celery worker in background
    start /B celery -A guitara worker --loglevel=info --concurrency=4 --pidfile=celery_worker.pid --logfile=celery_worker.log

    REM Start Celery beat scheduler in background
    start /B celery -A guitara beat --loglevel=info --pidfile=celery_beat.pid --logfile=celery_beat.log

    timeout /t 3 /nobreak >nul
    if exist celery_worker.pid (
        if exist celery_beat.pid (
            echo [‚úì] Celery workers started successfully with Redis
            set celery_ok=1
        ) else (
            echo [‚úó] Failed to start Celery beat
            set celery_ok=0
        )
    ) else (
        echo [‚úó] Failed to start Celery worker
        set celery_ok=0
    )
) else (
    echo [‚ö†] Running in in-memory mode - Celery tasks will execute synchronously
    echo [‚ö†] Background tasks are disabled for this mode
    set celery_ok=1
)
cd ..
goto :eof

REM Start development server
:start_server
if "%1"=="start_server" goto run_start_server
goto :eof

:run_start_server
echo [INFO] Starting optimized Django server...
cd guitara

REM Set optimization environment variables
set DJANGO_DEBUG=False
set PYTHONOPTIMIZE=1

REM Check if Uvicorn is available
uvicorn --version >nul 2>&1
if %errorlevel% == 0 (
    echo [‚úì] Starting with Uvicorn (recommended for WebSocket performance)
    start /B uvicorn guitara.asgi:application --host 0.0.0.0 --port 8000 --workers 4 --reload
) else (
    echo [‚ö†] Uvicorn not found, using Django development server
    start /B python manage.py runserver 0.0.0.0:8000
)

echo [‚úì] Django server started
cd ..
goto :eof

REM Create performance monitor script
:create_performance_monitor
echo [INFO] Creating performance monitoring script...

(
echo import time
echo import psutil
echo import requests
echo import json
echo from datetime import datetime
echo.
echo def check_system_health():
echo     """Check system resource usage"""
echo     cpu_percent = psutil.cpu_percent(interval=1)
echo     memory = psutil.virtual_memory()
echo     
echo     return {
echo         'cpu_percent': cpu_percent,
echo         'memory_percent': memory.percent,
echo         'memory_available_mb': memory.available // 1024 // 1024,
echo         'timestamp': datetime.now().isoformat()
echo     }
echo.
echo def check_app_health():
echo     """Check application health"""
echo     try:
echo         response = requests.get('http://localhost:8000/health/', timeout=5)
echo         if response.status_code == 200:
echo             return response.json()
echo         else:
echo             return {'status': 'unhealthy', 'error': f'HTTP {response.status_code}'}
echo     except Exception as e:
echo         return {'status': 'unreachable', 'error': str(e)}
echo.
echo def main():
echo     print("üîç Performance Monitor Started")
echo     print("=" * 50)
echo     
echo     while True:
echo         try:
echo             # System metrics
echo             system_health = check_system_health()
echo             app_health = check_app_health()
echo             
echo             # Display metrics
echo             print(f"\n[{system_health['timestamp']}]")
echo             print(f"CPU: {system_health['cpu_percent']:.1f}%%")
echo             print(f"Memory: {system_health['memory_percent']:.1f}%% ({system_health['memory_available_mb']}MB available)")
echo             
echo             if app_health.get('status') == 'healthy':
echo                 perf = app_health.get('performance', {})
echo                 print(f"App Status: ‚úÖ Healthy")
echo                 print(f"Avg Response Time: {perf.get('avg_response_time', 'N/A')}s")
echo                 print(f"Request Count: {perf.get('request_count', 'N/A')}")
echo                 print(f"Cache Hit Rate: {perf.get('cache_hit_rate', 'N/A')}%%")
echo             else:
echo                 print(f"App Status: ‚ùå {app_health.get('status', 'Unknown')}")
echo                 if 'error' in app_health:
echo                     print(f"Error: {app_health['error']}")
echo             
echo             # Warnings
echo             if system_health['cpu_percent'] ^> 80:
echo                 print("‚ö†Ô∏è  High CPU usage detected!")
echo             if system_health['memory_percent'] ^> 80:
echo                 print("‚ö†Ô∏è  High memory usage detected!")
echo             
echo             time.sleep(30)  # Check every 30 seconds
echo             
echo         except KeyboardInterrupt:
echo             print("\nüëã Performance monitoring stopped")
echo             break
echo         except Exception as e:
echo             print(f"‚ùå Monitoring error: {e}")
echo             time.sleep(10)
echo.
echo if __name__ == '__main__':
echo     main()
) > performance_monitor.py

echo [‚úì] Performance monitor created (run with: python performance_monitor.py)
goto :eof

REM Create load test script
:create_load_test
echo [INFO] Creating load test script...

(
echo import asyncio
echo import aiohttp
echo import time
echo from datetime import datetime
echo.
echo async def test_endpoint(session, url, method='GET'):
echo     """Test a single endpoint"""
echo     start_time = time.time()
echo     try:
echo         if method == 'GET':
echo             async with session.get(url) as response:
echo                 await response.json()
echo                 return {
echo                     'url': url,
echo                     'status': response.status,
echo                     'response_time': time.time() - start_time,
echo                     'success': response.status == 200
echo                 }
echo     except Exception as e:
echo         return {
echo             'url': url,
echo             'status': 0,
echo             'response_time': time.time() - start_time,
echo             'success': False,
echo             'error': str(e)
echo         }
echo.
echo async def load_test():
echo     """Run load test on key endpoints"""
echo     print("üß™ Starting Load Test...")
echo     
echo     endpoints = [
echo         'http://localhost:8000/api/appointments/today/',
echo         'http://localhost:8000/api/appointments/upcoming/',
echo         'http://localhost:8000/health/',
echo     ]
echo     
echo     concurrent_levels = [1, 5, 10, 20]
echo     
echo     async with aiohttp.ClientSession() as session:
echo         for concurrent in concurrent_levels:
echo             print(f"\nüìä Testing with {concurrent} concurrent requests...")
echo             
echo             tasks = []
echo             for _ in range(concurrent):
echo                 for endpoint in endpoints:
echo                     task = test_endpoint(session, endpoint)
echo                     tasks.append(task)
echo             
echo             start_time = time.time()
echo             results = await asyncio.gather(*tasks, return_exceptions=True)
echo             total_time = time.time() - start_time
echo             
echo             successful = sum(1 for r in results if isinstance(r, dict) and r['success'])
echo             avg_response_time = sum(r['response_time'] for r in results if isinstance(r, dict)) / len(results)
echo             
echo             print(f"Successful: {successful}/{len(results)}")
echo             print(f"Average Response Time: {avg_response_time:.3f}s")
echo             print(f"Requests/Second: {len(results)/total_time:.1f}")
echo             
echo             await asyncio.sleep(2)
echo.
echo if __name__ == '__main__':
echo     asyncio.run(load_test())
) > load_test.py

echo [‚úì] Load test script created (run with: python load_test.py)
goto :eof

REM Stop services
:stop_services
echo [INFO] Stopping services...
taskkill /F /IM python.exe >nul 2>&1
taskkill /F /IM celery.exe >nul 2>&1
taskkill /F /IM uvicorn.exe >nul 2>&1
if exist guitara\celery_worker.pid del guitara\celery_worker.pid
if exist guitara\celery_beat.pid del guitara\celery_beat.pid
echo [‚úì] Services stopped
goto :eof

REM Main menu
:menu
echo.
echo üéõÔ∏è  Guitara Performance Control Panel
echo ==================================
echo 1. Full Setup (Auto-detect Redis + DB + Server)
echo 2. Check System Health  
echo 3. Optimize Database
echo 4. Start Celery Workers (Redis mode only)
echo 5. Start Django Server
echo 6. Create Performance Monitor
echo 7. Create Load Test
echo 8. Run Performance Monitor
echo 9. Run Load Test
echo 10. Stop All Services
echo 11. Force In-Memory Mode (No Redis)
echo 12. Force Redis Mode
echo 0. Exit
echo.
set /p choice="Select option (0-12): "

if "%choice%"=="1" goto full_setup
if "%choice%"=="2" goto health_check
if "%choice%"=="3" goto db_optimize
if "%choice%"=="4" goto celery_start
if "%choice%"=="5" goto server_start
if "%choice%"=="6" goto perf_monitor_create
if "%choice%"=="7" goto load_test_create
if "%choice%"=="8" goto perf_monitor_run
if "%choice%"=="9" goto load_test_run
if "%choice%"=="10" goto stop_all
if "%choice%"=="11" goto force_memory_mode
if "%choice%"=="12" goto force_redis_mode
if "%choice%"=="0" goto exit

echo [‚úó] Invalid option
goto menu

:full_setup
call :check_redis
call :check_database
call :run_configure_mode

if !db_ok!==1 (
    echo [INFO] Database is ready, proceeding with setup...
    call :run_db_optimize
    
    if "%mode%"=="redis" (
        echo [INFO] Redis detected - Starting full performance setup...
        call :run_start_celery
    ) else (
        echo [INFO] Redis not available - Using in-memory mode...
        set celery_ok=1
    )
    
    call :run_start_server
    call :create_performance_monitor
    call :create_load_test
    
    echo.
    echo [‚úÖ] Setup completed successfully!
    echo [INFO] Mode: %mode%
    if "%mode%"=="memory" (
        echo [‚ö†] Running in in-memory mode - Some features limited
        echo [üí°] Install and start Redis for full performance features
    )
    echo [INFO] Run 'python performance_monitor.py' to start monitoring
) else (
    echo [‚ùå] Database connection failed - Cannot proceed with setup
    echo [INFO] Please check your database configuration and try again
)
pause
goto menu

:health_check
call :check_redis
call :check_database
call :show_status
pause
goto menu

:db_optimize
call :run_db_optimize
pause
goto menu

:celery_start
call :run_start_celery
pause
goto menu

:server_start
call :run_start_server
pause
goto menu

:perf_monitor_create
call :create_performance_monitor
pause
goto menu

:load_test_create
call :create_load_test
pause
goto menu

:perf_monitor_run
if exist performance_monitor.py (
    python performance_monitor.py
) else (
    echo [‚úó] Performance monitor not found. Create it first (option 6)
)
pause
goto menu

:load_test_run
if exist load_test.py (
    python load_test.py
) else (
    echo [‚úó] Load test not found. Create it first (option 7)
)
pause
goto menu

:stop_all
call :stop_services
pause
goto menu

:force_memory_mode
echo [INFO] Forcing in-memory mode (no Redis required)...
set redis_ok=0
set mode=memory
call :run_configure_mode
echo [‚úì] In-memory mode activated
echo [‚ö†] Background tasks will run synchronously
echo [üí°] Restart the application for changes to take effect
pause
goto menu

:force_redis_mode
echo [INFO] Forcing Redis mode...
call :check_redis
if !redis_ok!==1 (
    set mode=redis
    call :run_configure_mode
    echo [‚úì] Redis mode activated
    echo [üí°] Restart the application for changes to take effect
) else (
    echo [‚ùå] Redis is not available - Cannot switch to Redis mode
    echo [INFO] Please start Redis server and try again
)
pause
goto menu

:exit
echo [INFO] Goodbye!
exit /b 0

REM Handle command line arguments
if "%1"=="setup" goto full_setup
if "%1"=="health" goto health_check
if "%1"=="stop" goto stop_all
if "%1"=="" goto menu

REM Default to menu
goto menu
